{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","CSSTransitions/slide.module.css","components/Notification/Notification.module.css","CSSTransitions/slideLogo.module.css","CSSTransitions/pop.module.css","redux/contactActions/contactActions.js","redux/contactOperations/contactOperations.js","redux/contactSelectors/contactSelectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Logo/Logo.jsx","components/Notification/Notification.jsx","components/App/App.jsx","redux/contactReducers/contactReducers.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","filter","axios","defaults","baseURL","addContact","contact","dispatch","contactActions","post","then","resp","data","catch","error","removeContact","id","delete","fetchContacts","get","getContactItems","state","contacts","items","getFitredContactItems","createSelector","item","name","toLowerCase","includes","ContactForm","number","clearInput","e","target","value","inputHandler","setState","addButtonHandler","preventDefault","props","some","onOpenNotification","onAddContact","className","styles","input","type","placeholder","onChange","this","onClick","pattern","Component","defaultProps","onAddButton","mapDispatchToProps","contactOperations","connect","contactSelectors","Filter","filterHandler","ContactList","contactsList","onRemoveContact","TransitionGroup","component","list","length","map","CSSTransition","key","timeout","unmountOnExit","classNames","slideTransition","button","deleteHandler","Logo","Notification","container","App","didMount","contactExists","handleOpenNotification","prevState","setTimeout","onChangeFilter","getSavedContacts","prevProps","localStorage","setItem","JSON","stringify","in","LogoSlideTransition","appear","PopTransition","itemReducer","createReducer","action","payload","filterReducer","combineReducers","store","configureStore","reducer","contactReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5521cc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__2iahv\",\"list\":\"ContactList_list__3Lr3Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3bUhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__3BWAt\",\"enterActive\":\"slide_enterActive__26RvB\",\"exit\":\"slide_exit__268D5\",\"exitActive\":\"slide_exitActive__3piz5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__1hs1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__1i_P_\",\"enterActive\":\"slideLogo_enterActive__3uG6B\",\"exit\":\"slideLogo_exit__1-Sq4\",\"exitActive\":\"slideLogo_exitActive__vMaaK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__XFEaH\",\"enterActive\":\"pop_enterActive__3M3Oz\",\"exit\":\"pop_exit__341Cp\",\"exitActive\":\"pop_exitActive__3ifAF\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst addContactRequest = createAction(\"contact/addRequest\");\r\nconst addContactSuccess = createAction(\"contact/addSuccess\");\r\nconst addContactError = createAction(\"contact/addError\");\r\n\r\nconst removeContactRequest = createAction(\"contact/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contact/removeSuccess\");\r\nconst removeContactError = createAction(\"contact/removeError\");\r\n\r\nconst fetchContactRequest = createAction(\"contact/fetchRequest\");\r\nconst fetchContactSuccess = createAction(\"contact/fetchSuccess\");\r\nconst fetchContactError = createAction(\"contact/fetchError\");\r\n\r\n\r\nconst filter = createAction(\"contact/filter\");\r\n\r\n\r\nexport default {\r\n\r\n  filter,\r\n\r\n\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  \r\n};\r\n","import axios from \"axios\";\r\n\r\nimport contactActions from \"../contactActions/contactActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:9999\";\r\n\r\nconst addContact = (contact) => (dispatch) => {\r\n  dispatch(contactActions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then((resp) => dispatch(contactActions.addContactSuccess(resp.data)))\r\n    .catch((error) => dispatch(contactActions.addContactError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactActions.removeContactSuccess(id)))\r\n    .catch((error) => dispatch(contactActions.removeContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactActions.fetchContactRequest());\r\n\r\n  axios\r\n    .get(`/contacts`)\r\n    .then((resp) => dispatch(contactActions.fetchContactSuccess(resp.data)))\r\n    .catch((error) => dispatch(contactActions.fetchContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  removeContact,\r\n  fetchContacts,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit'\r\n\r\n\r\nconst getContactItems = (state) => state.contacts.items;\r\n\r\nconst getFilterString = state => state.contacts.filter\r\n\r\nconst getFitredContactItems = createSelector(\r\n  [getContactItems, getFilterString],\r\n  (items, filter) => items.filter((item) =>\r\n  item.name.toLowerCase().includes(filter.toLowerCase())\r\n)\r\n)\r\n\r\nexport default {\r\n  getContactItems,\r\n  getFitredContactItems,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactOperations from \"../../redux/contactOperations/contactOperations\";\r\n\r\nimport contactSelectors from \"../../redux/contactSelectors/contactSelectors\";\r\n\r\nclass ContactForm extends Component {\r\n  static defaultProps = {\r\n    onAddButton: () => {\r\n      return;\r\n    },\r\n  };\r\n\r\n  static propTypes = {\r\n    onAddButton: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  clearInput = (e) => {\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  inputHandler = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  addButtonHandler = (e) => {\r\n    const { name, number } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    const isInContacts = this.props.contacts.some(\r\n      (contact) => contact.name === name\r\n    );\r\n\r\n    if (isInContacts) {\r\n      this.props.onOpenNotification();\r\n      return;\r\n    }\r\n\r\n    this.props.onAddContact({ name, number });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className={styles.input}>\r\n          <p>Name</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Input name\"\r\n            name=\"name\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n          <p>Phone</p>\r\n          <input\r\n            type=\"tel\"\r\n            placeholder=\"Input number\"\r\n            name=\"number\"\r\n            pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"button\"\r\n          type=\"submit\"\r\n          onClick={this.addButtonHandler}\r\n        >\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactOperations.addContact,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactSelectors.getFitredContactItems(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function Filter({ filterHandler }) {\r\n  return (\r\n    <>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Input name\"\r\n        name=\"filter\"\r\n        onChange={filterHandler}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.defaultProps = {\r\n  filterHandler: () => {\r\n    return;\r\n  },\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterHandler: PropTypes.func.isRequired,\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport slideTransition from \"../../CSSTransitions/slide.module.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactOperations from \"../../redux/contactOperations/contactOperations\";\r\nimport contactSelectors from \"../../redux/contactSelectors/contactSelectors\";\r\n\r\nfunction ContactList({ contactsList, onRemoveContact }) {\r\n  return (\r\n    <>\r\n      <TransitionGroup component=\"ul\" className={styles.list}>\r\n        {contactsList.length > 0 &&\r\n          contactsList.map(({ id, name, number }) => (\r\n            <CSSTransition\r\n              key={id}\r\n              timeout={250}\r\n              unmountOnExit\r\n              classNames={slideTransition}\r\n            >\r\n              <li key={id}>\r\n                <button\r\n                  className={styles.button}\r\n                  type=\"button\"\r\n                  onClick={() => onRemoveContact(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n                {name}: {number}\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.defaultProps = {\r\n  contactsList: [],\r\n  deleteHandler: () => {\r\n    return;\r\n  },\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContact: contactOperations.removeContact,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsList: contactSelectors.getFitredContactItems(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\n\r\nexport default function Logo() {\r\n  return <h1>Phonebook</h1>;\r\n}\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nexport default function Notification() {\r\n    return (\r\n        <div className={styles.container}>\r\n            <p>Contact already exists!</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\n\nimport Logo from \"../Logo/Logo\";\nimport Notification from \"../Notification/Notification\";\n\nimport LogoSlideTransition from \"../../CSSTransitions/slideLogo.module.css\";\nimport PopTransition from \"../../CSSTransitions/pop.module.css\";\n\nimport { connect } from \"react-redux\";\n\nimport contactActions from \"../../redux/contactActions/contactActions\";\nimport contactOperations from \"../../redux/contactOperations/contactOperations\";\n\nclass App extends Component {\n  state = {\n    didMount: false,\n    contactExists: false,\n  };\n\n  componentDidMount() {\n    this.setState({ didMount: true });\n\n    this.props.getSavedContacts();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleOpenNotification = () => {\n    this.setState(\n      (prevState) => ({\n        contactExists: !prevState.contactExists,\n      }),\n      () =>\n        setTimeout(() => {\n          this.setState((prevState) => ({\n            contactExists: !prevState.contactExists,\n          }));\n        }, 1000)\n    );\n  };\n\n  filterHandler = (e) => {\n    this.props.onChangeFilter(e.target.value);\n  };\n\n  render() {\n    const { didMount, contactExists } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <CSSTransition\n            in={didMount}\n            timeout={500}\n            classNames={LogoSlideTransition}\n            appear\n          >\n            <Logo />\n          </CSSTransition>\n\n          <ContactForm onOpenNotification={this.handleOpenNotification} />\n\n          <h2 className=\"contactsTitle\">Contacts</h2>\n\n          <Filter filterHandler={this.filterHandler} />\n          <ContactList />\n        </div>\n\n        <CSSTransition\n          in={contactExists}\n          timeout={250}\n          unmountOnExit\n          classNames={PopTransition}\n        >\n          <Notification />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onChangeFilter: contactActions.filter,\n  getSavedContacts: contactOperations.fetchContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\n\r\n\r\n\r\n\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactActions from \"../contactActions/contactActions\";\r\n\r\nconst addContact = (state, action) => {\r\n\r\n  return [action.payload, ...state];\r\n};\r\n\r\nconst fetchContacts = (state, action) => action.payload;\r\n\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\n\r\n\r\n\r\n\r\nconst itemReducer = createReducer([], {\r\n  [contactActions.addContactSuccess]: addContact,\r\n  [contactActions.removeContactSuccess]: removeContact,\r\n  [contactActions.fetchContactSuccess]: fetchContacts,\r\n});\r\n\r\nconst filterContacts = (state, action) => action.payload;\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [contactActions.filter]: filterContacts,\r\n});\r\n\r\n\r\n\r\nexport default combineReducers({\r\n  items: itemReducer,\r\n  filter: filterReducer,\r\n});","// import { createStore, combineReducers } from \"redux\";\r\nimport contactReducers from \"../redux/contactReducers/contactReducers\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\n// const store = createStore(\r\n//   combineReducers({\r\n//     contacts: contactReducers,\r\n//   }),\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// );\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducers,\r\n  }\r\n})\r\n\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}