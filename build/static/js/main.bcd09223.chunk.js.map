{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","CSSTransitions/slide.module.css","components/Notification/Notification.module.css","CSSTransitions/slideLogo.module.css","CSSTransitions/pop.module.css","redux/contactActions/contactActions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Logo/Logo.jsx","components/Notification/Notification.jsx","components/App/App.jsx","redux/contactReducers/contactReducers.js","redux/store.js","index.js"],"names":["module","exports","add","createAction","name","number","payload","id","uuidv4","remove","filter","getFromLS","ContactForm","state","clearInput","e","target","value","inputHandler","setState","addButtonHandler","preventDefault","props","contacts","some","contact","onOpenNotification","onAddContact","className","styles","input","type","placeholder","onChange","this","onClick","pattern","Component","defaultProps","onAddButton","mapDispatchToProps","contactActions","connect","items","Filter","filterHandler","ContactList","contactsList","onRemoveContact","TransitionGroup","component","list","map","CSSTransition","key","timeout","unmountOnExit","classNames","slideTransition","button","deleteHandler","item","toLowerCase","includes","Logo","Notification","container","App","didMount","contactExists","handleOpenNotification","prevState","setTimeout","onChangeFilter","savedContacts","localStorage","getItem","parsedSavedContacts","JSON","parse","getSavedContacts","prevProps","setItem","stringify","in","LogoSlideTransition","appear","PopTransition","itemReducer","createReducer","action","contactsFromLS","newContact","parsedContacts","newContactsIntoLS","filterReducer","combineReducers","store","configureStore","reducer","contactReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcd09223.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__9wb-j\",\"list\":\"ContactList_list__3d3wq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__1Hnb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1pu1F\",\"enterActive\":\"slide_enterActive__1iPnf\",\"exit\":\"slide_exit__3GyK4\",\"exitActive\":\"slide_exitActive__2VZ5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__1oowR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__2qYMx\",\"enterActive\":\"slideLogo_enterActive__3UG-S\",\"exit\":\"slideLogo_exit__3a9Oj\",\"exitActive\":\"slideLogo_exitActive__26bTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2jvbB\",\"enterActive\":\"pop_enterActive__1ZScE\",\"exit\":\"pop_exit__1kGE0\",\"exitActive\":\"pop_exitActive__2Qsz4\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   FILTER_CONTACT,\r\n// } from \"../contactTypes/contactTypes\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst add = createAction(\"contact/add\", (name, number) => ({\r\n  payload: {\r\n    name,\r\n    number,\r\n    id: uuidv4(),\r\n  },\r\n}));\r\n\r\n\r\nconst remove = createAction('contact/remove');\r\nconst filter = createAction('contact/filter');\r\n\r\nconst getFromLS = createAction('contact/getFromLS');\r\n\r\n\r\n// const add = (name, number) => {\r\n//   return {\r\n//     type: ADD_CONTACT,\r\n//     payload: {\r\n//       name,\r\n//       number,\r\n//       id: uuidv4(),\r\n//     },\r\n//   };\r\n// };\r\n\r\n// const remove = (id) => {\r\n//   return {\r\n//     type: REMOVE_CONTACT,\r\n//     payload: {\r\n//       id,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// const filter = (name) => {\r\n//   return {\r\n//     type: FILTER_CONTACT,\r\n//     payload: name,\r\n//   };\r\n// };\r\n\r\nexport default {\r\n  add,\r\n  remove,\r\n  filter,\r\n  getFromLS,\r\n};","import React, { Component } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {connect} from 'react-redux'\r\n\r\nimport contactActions from '../../redux/contactActions/contactActions'\r\n\r\n class ContactForm extends Component {\r\n  static defaultProps = {\r\n    onAddButton: () => {\r\n      return;\r\n    },\r\n  };\r\n\r\n  static propTypes = {\r\n    onAddButton: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  clearInput = (e) => {\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  inputHandler = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  addButtonHandler = (e) => {\r\n\r\n    const {name, number} = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    const isInContacts = this.props.contacts.some((contact) =>\r\n    contact.name === name\r\n  );\r\n\r\n\r\n  if(isInContacts) {\r\n    this.props.onOpenNotification()\r\n    return;\r\n  }\r\n\r\n    this.props.onAddContact(name, number)\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className={styles.input}>\r\n          <p>Name</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Input name\"\r\n            name=\"name\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n          <p>Phone</p>\r\n          <input\r\n            type=\"tel\"\r\n            placeholder=\"Input number\"\r\n            name=\"number\"\r\n            pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"button\"\r\n          type=\"submit\"\r\n          onClick={this.addButtonHandler}\r\n        >\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactActions.add,\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => (\r\n  {\r\n    contacts: state.contacts.items\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function Filter({ filterHandler }) {\r\n  return (\r\n    <>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Input name\"\r\n        name=\"filter\"\r\n        onChange={filterHandler}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.defaultProps = {\r\n  filterHandler: () => {\r\n    return;\r\n  },\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterHandler: PropTypes.func.isRequired,\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport slideTransition from \"../../CSSTransitions/slide.module.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactActions from \"../../redux/contactActions/contactActions\";\r\n\r\nfunction ContactList({ contactsList, onRemoveContact }) {\r\n  return (\r\n    <>\r\n      <TransitionGroup component=\"ul\" className={styles.list}>\r\n        {contactsList.map(({ id, name, number }) => (\r\n          <CSSTransition\r\n            key={id}\r\n            timeout={250}\r\n            unmountOnExit\r\n            classNames={slideTransition}\r\n          >\r\n            <li key={id}>\r\n              <button\r\n                className={styles.button}\r\n                type=\"button\"\r\n                onClick={() => onRemoveContact(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n              {name}: {number}\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.defaultProps = {\r\n  contactsList: [],\r\n  deleteHandler: () => {\r\n    return;\r\n  },\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContact: contactActions.remove,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts;\r\n\r\n  const visibleContacts = items.filter((item) =>\r\n    item.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return {\r\n    contactsList: visibleContacts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\n\r\nexport default function Logo() {\r\n  return <h1>Phonebook</h1>;\r\n}\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nexport default function Notification() {\r\n    return (\r\n        <div className={styles.container}>\r\n            <p>Contact already exists!</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\n\nimport Logo from \"../Logo/Logo\";\nimport Notification from \"../Notification/Notification\";\n\nimport LogoSlideTransition from \"../../CSSTransitions/slideLogo.module.css\";\nimport PopTransition from \"../../CSSTransitions/pop.module.css\";\n\nimport { connect } from \"react-redux\";\n\nimport contactActions from \"../../redux/contactActions/contactActions\";\n\nclass App extends Component {\n  state = {\n    // contacts: [],\n    // filter: \"\",\n    didMount: false,\n    contactExists: false,\n  };\n\n  componentDidMount() {\n    this.setState({ didMount: true });\n\n    const savedContacts = localStorage.getItem(\"contacts\");\n\n    if (savedContacts) {\n      const parsedSavedContacts = JSON.parse(savedContacts);\n\n      this.props.getSavedContacts(parsedSavedContacts);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleOpenNotification = () => {\n    this.setState(\n      (prevState) => ({\n        contactExists: !prevState.contactExists,\n      }),\n      () =>\n        setTimeout(() => {\n          this.setState((prevState) => ({\n            contactExists: !prevState.contactExists,\n          }));\n        }, 1000)\n    );\n  };\n\n  filterHandler = (e) => {\n    this.props.onChangeFilter(e.target.value);\n  };\n\n  render() {\n    const { didMount, contactExists } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <CSSTransition\n            in={didMount}\n            timeout={500}\n            classNames={LogoSlideTransition}\n            appear\n          >\n            <Logo />\n          </CSSTransition>\n\n          <ContactForm onOpenNotification={this.handleOpenNotification} />\n\n          <h2 className=\"contactsTitle\">Contacts</h2>\n\n          <Filter filterHandler={this.filterHandler} />\n          <ContactList />\n        </div>\n\n        <CSSTransition\n          in={contactExists}\n          timeout={250}\n          unmountOnExit\n          classNames={PopTransition}\n        >\n          <Notification />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onChangeFilter: contactActions.filter,\n  getSavedContacts: contactActions.getFromLS,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   FILTER_CONTACT,\r\n// } from \"../contactTypes/contactTypes\";\r\n\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactActions from \"../contactActions/contactActions\";\r\n\r\nconst addContact = (state, action) => {\r\n  const contactsFromLS = localStorage.getItem(\"contacts\");\r\n  const newContact = action.payload;\r\n\r\n  if (!contactsFromLS) {\r\n    localStorage.setItem(\"contacts\", JSON.stringify([newContact]));\r\n  } else {\r\n    const parsedContacts = JSON.parse(contactsFromLS);\r\n    localStorage.setItem(\r\n      \"contacts\",\r\n      JSON.stringify([newContact, ...parsedContacts])\r\n    );\r\n  }\r\n\r\n  return [action.payload, ...state];\r\n};\r\n\r\nconst getFromLS = (state, action) => action.payload;\r\n\r\nconst removeContact = (state, action) => {\r\n  const contactsFromLS = localStorage.getItem(\"contacts\");\r\n  const parsedContacts = JSON.parse(contactsFromLS);\r\n\r\n  const newContactsIntoLS = parsedContacts.filter(\r\n    (contact) => contact.id !== action.payload\r\n  );\r\n\r\n  localStorage.setItem(\"contacts\", JSON.stringify(newContactsIntoLS));\r\n\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\n\r\nconst itemReducer = createReducer([], {\r\n  [contactActions.add]: addContact,\r\n  [contactActions.remove]: removeContact,\r\n  [contactActions.getFromLS]: getFromLS,\r\n});\r\n\r\nconst filterContacts = (state, action) => action.payload;\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [contactActions.filter]: filterContacts,\r\n});\r\n\r\n// const itemReducer = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case ADD_CONTACT:\r\n//       return [action.payload, ...state];\r\n\r\n//     case REMOVE_CONTACT:\r\n//       return state.filter((contact) => contact.id !== action.payload.id);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case FILTER_CONTACT:\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items: itemReducer,\r\n  filter: filterReducer,\r\n});","// import { createStore, combineReducers } from \"redux\";\r\nimport contactReducers from \"../redux/contactReducers/contactReducers\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\n// const store = createStore(\r\n//   combineReducers({\r\n//     contacts: contactReducers,\r\n//   }),\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// );\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducers,\r\n  }\r\n})\r\n\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}